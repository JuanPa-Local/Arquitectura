; === CARGA DE DATOS INICIALES (2^3) ===
0b00011000 ; MOV ACC, #2
0b00000010
0b10111000 ; MOV DPTR, #X
0b00010000
0b00110000 ; MOV [DPTR], ACC

0b00011000 ; MOV ACC, #3
0b00000011
0b10111000 ; MOV DPTR, #Y
0b00010001
0b00110000 ; MOV [DPTR], ACC

; === INICIO: Inicialización de RES_H y RES_L ===
0b00011000 ; MOV ACC, #0      RES_H = 0
0b00000000
0b10111000 ; MOV DPTR, #RES_H
0b00010011
0b00110000 ; MOV [DPTR], ACC

0b00011000 ; MOV ACC, #1      RES_L = 1
0b00000001
0b10111000 ; MOV DPTR, #RES_L
0b00010010
0b00110000 ; MOV [DPTR], ACC

; === CONDICIÓN INICIAL: Verificar si Y == 0 ===
0b10111000 ; MOV DPTR, #Y
0b00010001
0b00100000 ; MOV ACC, [DPTR]
0b01011000 ; JZ DONE
--> POS    ; (Posición de DONE a definir)

; === POWER_LOOP: Preparar multiplicación ===
0b10111000 ; MOV DPTR, #X
0b00010000
0b00100000 ; MOV ACC, [DPTR]
0b10111000 ; MOV DPTR, #MULTIPLICANDO
0b00010101
0b00110000 ; MOV [DPTR], ACC

0b10111000 ; MOV DPTR, #RES_L
0b00010010
0b00100000 ; MOV ACC, [DPTR]
0b10111000 ; MOV DPTR, #MULTIPLICADOR
0b00010110
0b00110000 ; MOV [DPTR], ACC

0b01110000 ; CALL BOOTH_MULT
--> POS    ; (Posición de etiqueta BOOTH_MULT a definir)

; === GUARDAR RESULTADO PARCIAL ===
0b10111000 ; MOV DPTR, #RESULT_L
0b00010111
0b00100000 ; MOV ACC, [DPTR]
0b10111000 ; MOV DPTR, #RES_L
0b00010010
0b00110000 ; MOV [DPTR], ACC

0b10111000 ; MOV DPTR, #RESULT_H
0b00011000
0b00100000 ; MOV ACC, [DPTR]
0b10111000 ; MOV DPTR, #RES_H
0b00010011
0b00110000 ; MOV [DPTR], ACC

; === DECREMENTO DE Y ===
0b00011000 ; MOV ACC, #1
0b00000001
0b00010000 ; MOV A, ACC
0b00111000 ; INV ACC
0b01001000 ; ADD ACC, A
0b00010000 ; MOV A, ACC
0b10111000 ; MOV DPTR, #Y
0b00010001
0b00100000 ; MOV ACC, [DPTR]
0b01001000 ; ADD ACC, A
0b00110000 ; MOV [DPTR], ACC

0b11000000 ; JNZ POWER_LOOP
--> POS    ; (Posición de etiqueta POWER_LOOP a definir)

; === MOSTRAR RESULTADO FINAL ===
0b10111000 ; MOV DPTR, #RESULT_H
0b00011000
0b00100000 ; MOV ACC, [DPTR]
0b00010000 ; MOV A, ACC

0b10111000 ; MOV DPTR, #RESULT_L
0b00010111
0b00100000 ; MOV ACC, [DPTR]

; === DONE ===
0b01111000 ; RET

; === SUBRUTINA BOOTH_MULT ===
0b00011000 ; MOV ACC, #0
0b00000000
0b10111000 ; MOV DPTR, #RESULT_H
0b00011000
0b00110000 ; MOV [DPTR], ACC

0b10111000 ; MOV DPTR, #MULTIPLICADOR
0b00010110
0b00100000 ; MOV ACC, [DPTR]
0b10111000 ; MOV DPTR, #RESULT_L
0b00010111
0b00110000 ; MOV [DPTR], ACC

0b00011000 ; MOV ACC, #8
0b00001000
0b10111000 ; MOV DPTR, #CTR_BITS
0b00010100
0b00110000 ; MOV [DPTR], ACC

; === BOOTH_LOOP ===
0b00011000 ; MOV ACC, #1
0b00000001
0b00010000 ; MOV A, ACC
0b10111000 ; MOV DPTR, #RESULT_L
0b00010111
0b00100000 ; MOV ACC, [DPTR]
0b01000000 ; AND ACC, A
0b01011000 ; JZ SKIP_ADD
--> POS    ; (Posición de etiqueta SKIP_ADD a definir)

; === Suma si LSB = 1 ===
0b10111000 ; MOV DPTR, #MULTIPLICANDO
0b00010101
0b00100000 ; MOV ACC, [DPTR]
0b00010000 ; MOV A, ACC
0b10111000 ; MOV DPTR, #RESULT_H
0b00011000
0b00100000 ; MOV ACC, [DPTR]
0b01001000 ; ADD ACC, A
0b10111000 ; MOV DPTR, #RESULT_H
0b00011000
0b00110000 ; MOV [DPTR], ACC

; === SKIP_ADD ===
0b10111000 ; MOV DPTR, #RESULT_H
0b00011000
0b00100000 ; MOV ACC, [DPTR]
0b10110000 ; SAR ACC
0b10111000 ; MOV DPTR, #RESULT_H
0b00011000
0b00110000 ; MOV [DPTR], ACC

0b10111000 ; MOV DPTR, #RESULT_L
0b00010111
0b00100000 ; MOV ACC, [DPTR]
0b10101000 ; SLR ACC
0b10111000 ; MOV DPTR, #RESULT_L
0b00010111
0b00110000 ; MOV [DPTR], ACC

; === CTR_BITS - 1 ===
0b00011000 ; MOV ACC, #1
0b00000001
0b00010000 ; MOV A, ACC
0b00111000 ; INV ACC
0b01001000 ; ADD ACC, A
0b00010000 ; MOV A, ACC
0b10111000 ; MOV DPTR, #CTR_BITS
0b00010100
0b00100000 ; MOV ACC, [DPTR]
0b01001000 ; ADD ACC, A
0b10111000 ; MOV DPTR, #CTR_BITS
0b00010100
0b00110000 ; MOV [DPTR], ACC

0b11000000 ; JNZ BOOTH_LOOP
--> POS    ; (Posición de etiqueta BOOTH_LOOP a definir)

0b01111000 ; RET
